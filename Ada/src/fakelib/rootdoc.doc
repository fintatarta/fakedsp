--****R* Root/Fakedsp
-- WHAT IS THIS?
--   This is the Ada version of the Fakedsp library. The library provides
--   the equivalent of a virtual card with an ADC and a DAC.  The ADC
--   acquires samples at a given sampling frequency and every time 
--   a sample is ready a 
--   |html <i>virtual interrupt handler</i> (written by the user) is called.   
--   At the same time the DAC updates its output.
--
--   The signal processing is typically carried out inside the virtual
--   interrupt handler.  The virtual handler can get the samples 
--   produced by the ADC by using the function Read_ADC and send the 
--   processed data to the DAC by using the procedure Write_DAC.
--
--   Of course, the ADC and DAC are not real; therefore, the ADC samples
--   will be read from a file and the DAC samples will be written to
--   a file.
--
-- HOW DO I USE IT?
--
--  The typical workflow is the following:
--  * Write the virtual interrupt handler (that, remember, will do the 
--    processing) by creating a 
--    |html <i>concrete version</i> of the interface Callback_Handler
--    defined in the package Fakedsp.Card.
--  * Create a Data_Source and a Data_Destination that will be used, 
--    respecitvely, from the ADC and the DAC for sample I/O.  The easiest
--    way to do this is to use the opening functions provided by 
--    the package Files
--  * Turn on the virtual card by calling the procedure Start in 
--    Fakedsp.Card  The code, behind the scenes,  will get the data
--    from the Data_Source, send results to the Data_Destination and call
--    your handler
--
-- INSTALLING
--
--    The installation is very simple: just put the content of directory 
--    |html <code>fakelib/src</code> where your compiler will find it
--    and that's it!  If you use the Adacore project manager
--    |html <code>gprbuild</code>, just place the whole 
--    |html <code>Ada</code> directory somewhere and
--    |html <code>with</code> project 
--    |html <code>fakedsp.gpr</code> inside your 
--    |html <code>gpr</code> file.
--
-- EXAMPLE
--
--   You can find examples in the directory src/examples.  Currently there
--   is only one example, namely an example of processing with a notch filter.
--   Maybe more examples will be added in the future. This example can be
--   used as a starting point for your own processing code.
--
-- SEE ALSO
--
--   In the usual spirit of Ada, a detailed (enough) description of 
--   the interface of the different packages is embedded directly
--   in the spec file (extension
--   |html <code>.ads</code>).  
--
-- NOTES
--
--   |html <h3>But I do not know Ada!</h3>
--
--   Well, you can learn... :-)
--
--   I think that Ada is a very nice and modern language that helps you
--   writing very robust software easily and in short time. Debugging times
--   are typically 10% of the debugging time of C. (Note: 10% of..,
--   not 10% smaller...) I abandoned C since I learned Ada.
--   
--   A main issue with Ada is that is it is not widely known 
--   and there is not much material to learn it.  Nevertheless, there 
--   are few very good resources
--
--   |html <ul>
--   |html <li><a href="https://dwheeler.com/lovelace/lovelace.htm">Ada 95 Tutorial</a> This is an old tutorial (with excercises) about Ada 95.  I
--   learned Ada with this.  Ada 95 is a fairly old version of Ada (now we
--   are at Ada 2012) and many new features are missing, but it is a good
--   introduction to the language.  If you are new to the language,
--   breaking the ground with this can be a good idea.
--   |html <li><a href="https://learn.adacore.com">Adacore</a> 
--   Adacore is the
--   producer of GNAT, the gcc frontend for Ada. In this site you can find
--   an introduction to Ada and an introduction to SPARK (a subset of Ada
--   suitable for formal checking, nothing to do with Apache...).  I did
--   not use them, but they look nice (and relative to more modern Ada
--   versions)
--   |html <li><a href="https://www.adaic.org/learn/materials/">Adaic</a> 
--   This is a meta-resource, it is a site with lots of 
--   links to learning material, libraries, tools, and so on...
--   |html <li><a href="https://www.adaic.org/resources/add_content/standards/12rm/html/RM-TOC.html">RM</a>.
--   It is not possible not to mention the
--   (in)famous and
--   fundamental **Reference Manual**. This is the standard ISO
--   describing the language, it is written in "computer science
--   legalese" and if it was a bit more obscure it would seem
--   encrypted. :-) Seriously, this is the ultimate resource to know
--   about Ada, although you need to get used to it.  The annotated
--   version and the corresponding "Rationale" (that you can find on the
--   Adaic site) often can help since they do not need to be as formal as
--   the reference text.
--   |html <li>There is also the newsgroup (yes! they are still alive!)
--   |html <code>comp.lang.ada</code> quite active, with a good
--   signal to noise ratio
--   and many people wiling to help beginners (although you must be nice
--   too... this goes without saying...).  There is also a LinkedIn
--   group, but it is less active and more for announcements etc. I know
--   that there is also an IRC channel, but I am not an IRC user.
--   |html </ul>
--   
--   You can download open source IDE, compilers, and so on... from the [Adacore]:https://www.adacore.com/download [Adacore] site.  
--   
--   Oh, yes, if you come definitively to the dark side and want to meet
--   with other Adaists, keep an eye on the [FOSDEM]:https://fosdem.org/
--   the Free and Open Source Developers European Meeting, hold yearly in
--   Bruxells.  Often in the program there is the *Ada dev room* with
--   interesting talks and introductions for beginners.  Some past Editions:
--   * 2019: href:https://fosdem.org/2019/schedule/track/ada/
--   * 2018: href:https://archive.fosdem.org/2018/schedule/track/ada/ 
--   * 2016: href:https://archive.fosdem.org/2016/schedule/track/ada/ 
--
--
--***
